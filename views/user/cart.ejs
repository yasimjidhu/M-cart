<%- include('../user/partials/header') %>

<!--Navbar-->

<%-include('../user/partials/navbar') %>



<div class="container mt-5">
  <div class="row">
      <div class="col-12">
          <table class="table table-striped" id="tableRow">
              <thead>
                  <tr>
                      <th scope="col">Product</th>
                      <th scope="col">Price</th>
                      <th scope="col">Quantity</th>
                      <th scope="col">Subtotal</th>
                      <th scope="col">Remove</th>
                  </tr>
                  
              </thead>
              <tbody>

              </tbody>
          </table>
      </div>
      <div class="col-12 d-flex mt-3">
          <div class="col-lg-6 d-flex justify-content-start">
              <a href="/user/home"><button class="cart-btn btn ">Return to shop</button></a>
          </div>
      </div>
      <div class="row w-100 mt-5 ml-1  coupon-div d-flex justify-content-start align-items-center">
        <div class="col-lg-3  d-flex justify-content-start align-items-center">
            <input class="coupon-input form-cont" type="text" placeholder="Coupon code" name="coupon">
        </div>
        <div class="col-lg-5">
            <button class="coupon-btn ">Apply Coupon</button>
        </div>
        <div class="col-lg-4">
            <div class="row h-100">
                <div class="col-12 cart-total ">
                   <div class="col-lg-12 txt-div  mt-1">
                    <h5 class="text-white">Cart Total</h5>
                    <br>
                    <p class="bordered text-white" id="fullTotal">Sub Total: <span id="subCartTotal" class="float-right"><%=locals.cartTotal%></span></p>
                    <p class="bordered text-white">Shipping <span class="float-right">Free</span></p>
                    <p class="text-white">Total <span class="float-right" id="wholeTotal" ><%=locals.cartTotal%></span></p>
                    <div class="checkout-div ">
                      <a href="#" class="checkout-btn" style="text-decoration: none; color: black;">Process To Checkout</a>
                    </div>
                   </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12">
      
      <ul id="productList">
      </ul>
    </div>
  </div>
</div>

<!--fetch sample-->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    
    fetch('/cart/cart-products')
      .then(response => response.json())
      .then(data => {
        if(data.success){

          console.log("fetch products",data)
          const cartTotal = data.total
          console.log('cartTotal is')
        }
        const productTable = document.getElementById('tableRow');
        console.log('data.datas',data.datas)
        data.datas.forEach(product => {
          const tr = document.createElement('tr');
          tr.id = `productRow_${product._id}`; // Assign unique ID to each row

          // Image cell
          const imgTd = document.createElement('td');
          const img = document.createElement('img');
          
          img.src = `/uploads/${product.image[4]}`; 
          img.style.width = '110px';
          img.style.height = '110px';
          imgTd.appendChild(img);
          tr.appendChild(imgTd);

          // Price cell
          const priceTd = document.createElement('td');
          priceTd.textContent = `${product.price}`;
          tr.appendChild(priceTd);

          // Quantity cell
          const quantityTd = document.createElement('td');
          const quantityInput = document.createElement('input');
          quantityInput.type = 'number';
          quantityInput.min = '1';
          quantityInput.value = product.quantity||1;
          quantityInput.classList.add('quantity-input');
          quantityInput.addEventListener('change', function () {
            updateSubtotal(this, priceTd);
          });

          // Create decrement button
          const decrementButton = document.createElement('button');
          decrementButton.textContent = '-';
          decrementButton.classList.add('quantity-decrement');
          decrementButton.addEventListener('click', function () {
            if (quantityInput.value > 1) {
              quantityInput.value = parseInt(quantityInput.value) - 1;
              updateSubtotal(quantityInput, priceTd);
            }
          });

          // Create increment button
          const incrementButton = document.createElement('button');
          incrementButton.textContent = '+';
          incrementButton.classList.add('quantity-increment');
          incrementButton.addEventListener('click', function () {
            quantityInput.value = parseInt(quantityInput.value) + 1;
            updateSubtotal(quantityInput, priceTd);
          });

          quantityTd.appendChild(decrementButton);
          quantityTd.appendChild(quantityInput);
          quantityTd.appendChild(incrementButton);
          tr.appendChild(quantityTd);

        

          // Subtotal cell
          const subtotalTd = document.createElement('td');
          subtotalTd.textContent = `${product.price}`;
          tr.appendChild(subtotalTd);

          const deleteTd = document.createElement('td')
          const remove = document.createElement('img')

          remove.addEventListener('click',()=>{
            removeItem(product._id)
          })
          remove.src = `/png/minus-button.png`;
          remove.style.width = '30px';
          remove.style.marginLeft='20px'
          remove.style.cursor='pointer'

          // remove.appendChild(remove)
          deleteTd.appendChild(remove)
          tr.appendChild(deleteTd)

          // Append the whole row to the table
          productTable.appendChild(tr);
        });

        function updateSubtotal(input, priceCell) {
          const quantity = input.value;
          const price = parseFloat(priceCell.textContent);
          const subtotal = quantity * price;
          const row = input.parentNode.parentNode;
          const subtotalCell = row.getElementsByTagName('td')[3];
          const subTotalCard = document.getElementById('subCartTotal')
          const wholeTotal = document.getElementById('wholeTotal')

          subtotalCell.textContent = `${subtotal.toFixed(2)}`;
          subTotalCard.textContent = `${subtotal.toFixed(2)}`;
          wholeTotal.textContent = `${subtotal.toFixed(2)}`;
        }
      })
      .catch(error => console.error('Error occurred:', error));


      function constructCheckoutURL() {
      const checkoutButton = document.querySelector('.checkout-btn');
      checkoutButton.addEventListener('click', function (event) {
        event.preventDefault(); // Prevent default link behavior

        const currentQuantity = getCurrentQuantity();
        const totalPrice = getCartTotal();

        const checkoutHref = '/cart/checkout';
        const updatedCheckoutHref = `${checkoutHref}?quantity=${currentQuantity}&total=${totalPrice}`;

        window.location.href = updatedCheckoutHref; // Redirect to the checkout URL
      });
    }

    function getCurrentQuantity() {
      const quantityInputs = document.querySelectorAll('.quantity-input');
      let totalQuantity = 0;
      quantityInputs.forEach(input => {
        totalQuantity += parseInt(input.value);
      });
      return totalQuantity;
    }

    function getCartTotal() {
      const allProducts = document.querySelectorAll('.quantity-input')
      let totalPrice = 0;

      allProducts.forEach(product =>{
        const quantity = parseInt(product.value);
        const price = parseFloat(product.parentNode.previousElementSibling.textContent)

        totalPrice += quantity * price;
      })

      return totalPrice.toFixed(2);
    }

    constructCheckoutURL(); // Call the function to attach the click event listener
  });



  async function removeItem(productID) {
  const productId = productID;

  try {
    const confirmed = await deleteAlert();
    
    if (confirmed) {
      const response = await fetch(`/cart/removeItem/${productId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        console.log('item deleted successfully');
        window.location.reload()
      } else {
        console.log('deletion failed');
        Swal.fire({
          icon: 'error',
          title: 'Failed',
          text: 'Product not found',
          showConfirmButton: false,
          timer: 2000
        });
      }
    } else {
      console.log('Deletion canceled');
    }
  } catch (error) {
    console.error(error);
    Swal.fire({
      icon: 'error',
      title: 'Failed',
      text: 'Internal server error',
      showConfirmButton: false,
      timer: 2000
    });
  }
}

// Alert for product deletion
function deleteAlert() {
  return new Promise((resolve) => {
    Swal.fire({
      icon: 'warning',
      title: 'Warning',
      text: 'Are you sure to delete this item from cart?',
      showConfirmButton: true,
      showCancelButton: true,
      confirmButtonText: 'Yes, delete it',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      resolve(result.isConfirmed);
    });
  });
}
</script>




<%-include('./partials/footer.ejs')  %>
