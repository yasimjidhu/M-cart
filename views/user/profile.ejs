<!--------header---------->
<%- include('../user/partials/header') %> 

<!--------navbar---------->
<%- include('../user/partials/navbar') %>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2 p-0">
                <%-include('../user/partials/sidebar') %>
            </div>
            <div class="col-lg-3 ">
                <div class="col-lg-12  userDpDiv">
                    <div class="rounded-circle overflow-hidden" style="width: 45%; margin: 10px 0px;">
                        <% if (userData.profileImage) { %>
                            <img src="/uploads/profile_images/<%= userData.profileImage %>" class="selected-image" alt="">
                        <% } else { %>
                            <img src="/png/userNew.png" class="selected-image" alt="Default Image">
                        <% } %>
                    </div>
                        <form  enctype="multipart/form-data">
                            <input type="file" id="profileImageInput" name="profileImage" onchange="uploadprofilePic(event)">
                            <label for="profileImageInput" class="custom-file-upload">
                                <i class="fas fa-cloud-upload-alt"></i> Choose File
                            </label>                        
                        </form>
                    <div class="dts" style="width: 55%; text-align: center;">
                        <h3 class="" style="font-size: 18px; font-weight: 600; color: #FF7D00;"><%=userData.name.toUpperCase() %></h3>
                        <p class="textwhite"><%=userData.email %></p>
                        <%if(firstAddress&&firstAddress.address){%>
                            <p class="textwhite"><%=firstAddress.address.state%></p>
                        <%}else{%>
                            <a href="/account/addAddress" style="text-decoration: none;"><p style="color: gray; cursor: pointer;" data-toggle="tooltip" data-placement="left" title="click to add address">Not available</p></a>
                        <%}%>
                    </div>    
                </div>
                <div class="col-lg-12 profilePic mt-3">
                    <div class="d-flex justify-content-start align-items-center profile-options">
                        <img src="/png/coupon.png" width="30px">
                        <a href="/cart/cart">My coupons</a>
                    </div>
                    <div class="d-flex justify-content-start align-items-center profile-options">
                        <img src="/png/shop.png" width="30px">
                        <a href="/cart/cart">Cart collection</a>
                    </div>
                    <div class="d-flex justify-content-start align-items-center profile-options">
                        <img src="/png/wishlist.png" width="30px">
                        <a href="/cart">My wishlist</a>
                    </div>
                </div>
                
            </div>
            <div class="col-lg-7 user-details">
                <div class="input-head">
                    <h5>Edit Your profile</h5>
                </div>
                <div class="row">
                    <div class="col-lg-6 ">
                        <div class="form-group">
                            <label for="fullName">Full Name</label>
                            <input type="text" class="form-control edit-input" name="name" readonly id="name" value="<%=userData.name.toUpperCase() %>">
                            <img src="/png/pencil.png" alt="" class="edit-info-icon-1 edit-btn">
                        </div>
                        <div class="form-group">
                            <label for="state">State</label>
                            <input type="text" class="form-control edit-input"  name="state"  readonly id="state" value="<%=userData.state%>">
                            <img src="/png/pencil.png" alt="" class="edit-info-icon-2 edit-btn">
                        </div>
                    </div>
                <div class="col-lg-6 ">
                  <div class="form-group">
                    <label for="Email">Email</label>
                    <input type="email" class="form-control"  name="email" readonly id="email"  value="<%=userData.email %>">
                    <!-- <img src="/png/pencil.png" alt="" class="edit-info-icon-1 edit-btn"> -->
                  </div>
                  <div class="form-group">
                    <label for="Address">Phone Number</label>
                    <input type="number" class="form-control edit-input"  name="phoneNumber" readonly id="phoneNumber" value="<%=userData.phoneNumber %>">
                    <img src="/png/pencil.png" alt="" class="edit-info-icon-2 edit-btn">
                  </div>
                </div>

            </div>
            <form id="passwordChangeForm">
                <div class="row">
                    <div class="input-head1">
                        <h5>Change password</h5>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <h5 id="nullError"></h5>
                            <label for="password">Current Password</label>
                            <input type="password" class="form-control" name="currentPassword" placeholder="Current Password" id="currentPassword">
                        </div>
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <input type="password" class="form-control" name="newPassword" placeholder="New Password" id="newPassword">
                        </div>
                        <div class="form-group">
                            <label for="confirmNewPassword">Confirm New Password</label>
                            <input type="password" class="form-control" name="confirmNewPassword" placeholder="Confirm New Password" id="confirmNewPassword">
                        </div>
                        <div class="profile-button">
                            <!-- <button type="button" class="cancel-button">Cancel</button> -->
                            <button type="submit" class="save-button">Save changes</button>
                        </div>
                    </div>
                </div>
            </form>
            
            </div>
        </div>
    </div>
</body>


<script>
    //  document.getElementById('editProfileImage').addEventListener('click', function() {
    //     document.getElementById('profileImageInput').click();
    // });
    function uploadprofilePic(event) {
    const fileInput = event.target;

    if (fileInput.files && fileInput.files[0]) {
        const file = fileInput.files[0];
        const imageTypes = ['image/jpeg', 'image/png', 'image/gif']; // Array of accepted image types

        if (!imageTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid File Type',
                text: 'Please select a valid image file (JPEG, PNG, GIF)',
            });
            return;
        }

        const formData = new FormData();
        formData.append('profileImage', file);

        // Display the selected image in the userDp div
        const imageContainer = document.querySelector('.userDp');

        const reader = new FileReader();
        reader.onload = function (event) {
            const imageUrl = event.target.result;

            // Create an img element to display the selected image
            const selectedImage = document.createElement('img');
            selectedImage.src = imageUrl;
            selectedImage.classList.add('selected-image');

            // Clear previous content and append the selected image
            imageContainer.innerHTML = '';
            imageContainer.appendChild(selectedImage);
        };

        reader.readAsDataURL(file);

        fetch('/account/uploadCroppedImage', {
            method: 'POST',
            body: formData
        })
        .then(res => {
            if (res.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'File uploaded successfully',
                    timer: 2000, // Set timer for 2 seconds (2000 ms)
                    showConfirmButton: false // Hide the "OK" button
                }).then(() => {
                    // Perform reload after the timer ends
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000); // Same duration as the timer
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to upload file',
                });
                console.error('Upload failed');
            }
        })
        .catch(err => {
            console.error('Error uploading files', err);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error uploading files',
            });
        });
    }
}


        function validatePassword(password) {

            const strongPasswordPattern = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+}{"':;?/>.<,])(?=.*[a-zA-Z]).{8,}$/;

            return strongPasswordPattern.test(password)
          }

    // RESET PASSWORD
    document.getElementById('passwordChangeForm').addEventListener('submit',async function(event){
    event.preventDefault()

    const passwordValue = document.getElementById('newPassword').value

    if(!validatePassword(passwordValue)){
        event.preventDefault()
        Swal.fire({
                icon: 'error',
                title: 'oops',
                text: 'password must be atleast 8 characters long,one digit,one lower case letter,one uppercase letter and atleast one special character',
                showConfirmButton: true,
            })
            return
    }


        const formData = {
            currentPassword:document.getElementById('currentPassword').value,
            newPassword:document.getElementById('newPassword').value,
            confirmNewPassword:document.getElementById('confirmNewPassword').value
        }

        try {
            const response = await fetch('/account/reset-password',{
                method:'POST',
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify(formData)
            })
            const data = await response.json()
            if(data.nullBody){
                const nullError = document.querySelector('#nullError')
                nullError.innerHTML='Please fill the fields'
                nullError.style.color="red"
                nullError.style.textAlign = 'center'
                setTimeout(() => {
                    nullError.innerHTML=''
                }, 3000);
            }else if(data.success){
                Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'password reset successfully',
                showConfirmButton: false,
                timer: 2000
            }).then(()=>{
                console.log('password reset successfully')
            })
            }else if(data.unMatchPass){
                Swal.fire({
                icon: 'error',
                title: 'failed',
                text: 'New Password and confirm new password is not matching',
                showConfirmButton: false,
                timer: 2000
            }).then(()=>{
                console.log('New Password and confirm new password is not matching')
            })
            }else{
                Swal.fire({
                icon: 'Error',
                title: 'failed',
                text: 'password must be atleast 8 characters long,one digit,one lower case letter,one uppercase letter and atleast one special character',
                showConfirmButton: false,
                timer: 2000
            }).then(()=>{
                console.log('reset password failed')
            })
            }     
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to reset password',
                showConfirmButton: false,
                timer: 2000
            }).then(()=>{
                console.error(error)
            })
            
        }
    })

    // function to change the input field from read only mode to edit mode
   // Get all input fields and buttons
   const inputFields = document.querySelectorAll('.edit-input');
   const editButtons = document.querySelectorAll('.edit-btn');

        // Add event listeners to all edit buttons
        editButtons.forEach((button, index) => {
            button.addEventListener('click', function(event) {
                const img = this;
                const parent = this.closest('.form-group'); // Find the parent container of the clicked button

                if (inputFields[index].readOnly) {
                    inputFields[index].readOnly = false;
                    img.src = '/png/ok.png';
                     // Pass the index of the clicked button
                } else {
                    inputFields[index].readOnly = true;
                    img.src = '/png/pencil.png';
                    editUserInfo(index,event);
                }
            });
        });


        // input validation
        function isEmpty(value){
            const trimmed = value.trim()
            return trimmed ===""
        }

        function validName(value){
            const regex = /^[A-Za-z'-]+(?:\s[A-Za-z'-]+)*$/
            return regex.test(value)
        }
        function validNumber(value){
            const regex = /^\d{10}$/
            return regex.test(value)
        }
        function validState(value){
            const regex = /^[A-Za-z\s]+$/
            return regex.test(value)
        }


        // Edit user info based on the index received from the clicked button
        async function editUserInfo(index,event) {

            event.preventDefault()

            const name = document.getElementById('name').value;
            const state = document.getElementById('state').value;
            const phoneNumber = document.getElementById('phoneNumber').value;

            // Validate form fields
            if (isEmpty(name) || !validName(name)) {
                showErrorAlert('please enter a valid name')
                return
            }
            if (isEmpty(phoneNumber) || !validNumber(phoneNumber)) {
                showErrorAlert('please enter valid phone number')
                return
                
            }

            if(isEmpty(state) || !validState(state)){
                showErrorAlert('please enter valid state')
                return
            }


            // function for showing error alert

            function showErrorAlert(message) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Input',
                    text: message,
                    showConfirmButton: false,
                    timer: 2000
                });
            }

            // else (if the form is valid) the next function will work

            const UserData = {
                name,
                state,
                phoneNumber
            };

            // Modify the URL and data sent based on the index if needed
            const response = await fetch('/account/edit-UserInfo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(UserData)
            });

            if (!response.ok) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to update userInfo',
                    showConfirmButton: false,
                    timer: 2000
                });
            } else {
                Swal.fire({
                    icon: 'success',
                    title: 'Updated',
                    text: 'User Info updated',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        }

</script>