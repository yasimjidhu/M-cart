<%- include('../user/partials/header') %>

  <!--Navbar-->

  <%-include('../user/partials/navbar') %>

    <div class="container mt-5">
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal"
        data-bs-whatever="@mdo">Add Address</button>
      <div class="row">
        <div class="col-lg-7 mt-3  p-0  d-flex">
          <%if(userAddress && userAddress.length>0){%>
            <%userAddress.forEach((data,index)=>{%>
              <div class="col-lg-4 col-md-6 m-1 address1 border" style="box-shadow:0px 0px 7px 0px #001524;">
                <p>
                  <%= data.fullName.toUpperCase()%>
                </p>
                <p>
                  <%= data.phoneNumber %>
                </p>
                <p>
                  <%= data.email%>
                </p>
                <p>
                  <%= data.pinCode %>
                </p>
                <p>
                  <%= data.state %>
                </p>
                <p>
                  <%= data.district %>
                </p>
                <p>
                  <%= data.area %>
                </p>
                <p>
                  <%= data.street %>
                </p>
                <p>
                  <%= data.building %>
                </p>
                <p>
                  <%= data.houseNumber %>
                </p>
                <input type="radio" id="select<%= index %>" name="address" value="<%= data.id %>"
                  class="float-right mt-1">
                <label for="select<%= index %>" class="text-danger float-right mr-3">Select</label>
              </div>
              <%})%>
                <%}else{%>
                  <div class="col-lg-12 d-flex justify-content-center align-items-start">
                    <img src="/svg/address.svg" alt="" width="70%">
                  </div>
                  <%}%>
                    <div class="col-lg-3">
                      <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog">
                          <div class="modal-content">
                            <div class="modal-header">
                              <h5 class="modal-title" id="exampleModalLabel">Create A New Address</h5>
                              <button type="button" class="btn-close" data-bs-dismiss="modal"
                                aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                              <form id="addAddressModal">
                                <div class="mb-3">
                                  <label for="recipient-name" class="col-form-label">Full Name</label>
                                  <input type="text" class="form-control" id="fullName" name="fullName">
                                  <p id="name-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Phone Number</label>
                                  <input type="text" class="form-control" id="phoneNumber" name="phoneNumber">
                                  <p id="phoneNumber-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Email</label>
                                  <input type="email" class="form-control" id="email" name="email">
                                  <p id="email-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Country</label>
                                  <input type="text" class="form-control" id="country" name="country">
                                  <p id="country-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Pincode</label>
                                  <input type="number" class="form-control" id="pinCode" name="pincode">
                                  <p id="pinCode-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">State</label>
                                  <input type="text" class="form-control" id="state" name="state">
                                  <p id="state-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">District</label>
                                  <input type="text" class="form-control" id="district" name="district">
                                  <p id="district-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">City</label>
                                  <input type="text" class="form-control" id="city" name="city">
                                  <p id="city-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Area</label>
                                  <input type="text" class="form-control" id="area" name="area">
                                  <p id="area-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Street</label>
                                  <input type="text" class="form-control" id="street" name="street">
                                  <p id="street-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">Building</label>
                                  <input type="text" class="form-control" id="building" name="building">
                                  <p id="building-error"></p>
                                </div>
                                <div class="mb-3">
                                  <label for="message-text" class="col-form-label">house Number</label>
                                  <input type="number" class="form-control" id="houseNumber" name="houseNumber">
                                  <p id="houseNumber-error"></p>
                                </div>
                                <button type="submit" class="btn btn-primary">Submit</button>
                              </form>
                            </div>
                            <div class="modal-footer">
                              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
        </div>
        <!-- <form id="placeOrder"> -->
        <div class="col-lg-4 col-md-6 Subtotal-div ml-5 mt-3">
          <div class="col-lg-12 img-div align-items-start"> <!-- Adjusted class -->
            <% userCartData.forEach((data, index)=> { %>
              <% data.userCartProducts.forEach((product)=> { %>
                <div class="border-bottom mt-3">
                  <img src="/uploads/<%= product.image[4] %>" class="figure-img product-img img-fluid rounded "
                    alt="Image <%= index + 1 %>">
                  <h6 class="float-right mt-4">
                    <%=product.productName %>
                  </h6>
                  <%=product.category%>
                    <input type="hidden" value="<%=product._id %>" id="productId">
                </div>
                <% }); %>
                  <% }); %>
          </div>
          <div class="col-lg-12">
            <h6 class="bordered">Subtotal <span class="float-right">
                <%=totalPrice%>
              </span></h6>
            <h6 class="bordered">Shipping <span id="displayedShippingPrice" class="float-right">0</span></h6>
            <h6 class="bordered">Total <span id="displayedTotalPrice" class="float-right">
                <%=totalPrice %>
              </span></h6>
          </div>
          <div class="col-lg-12">
            <div>
            </div>
            <div class="mt-3">
              <input type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery">
              <label for="cashOnDelivery">Cash On Delivery</label>
              <br>
              <input type="radio" name="paymentMethod" id="razorPay" value="razorPay">
              <label for="cashOnDelivery">Razor Pay</label>
              <img class="float-right" src="/svg/razorpay.svg" alt="" width="100px">
              <!-- <button id="rzp-button1">Pay</button> -->
              <button type="submit" class="btn btn-primary float-right mt-5 mb-3" id="placeOrderButton">Place
                Order</button>
            </div>

          </div>
        </div>
      </div>
      <h4 class="mt-5">Choose Shipping Type</h4>
      <div class="row mt-5 p-0  d-flex justify-content-between">
        <div class="col-lg-3 col-md-6 border Shipping">
          <input type="radio" name="shippingMethod" value="standard">
          <label for="standard" class="ml-2" style="font-weight: 700;">Standard</label>
          <p>Partner:<span class="ml-1">Drip Store</span></p>
          <p>Type:<span class="ml-1">free</span></p>
          <p>Shipping charge:<span class="ml-1 text-danger">0</span></p>
        </div>
        <div class="col-lg-3 col-md-6 border Shipping ">
          <input type="radio" name="shippingMethod" value="express">
          <label for="express" class="ml-2" style="font-weight: 700;">Express</label>
          <p>Partner:<span class="ml-1">DHL</span></p>
          <p>Type:<span class="ml-1">Paid</span></p>
          <p>Shipping charge:<span class="ml-1 text-danger">100</span></p>
        </div>
        <div class="col-lg-3 col-md-6 border Shipping">
          <input type="radio" name="shippingMethod" value="sameDay" id="sameDay">
          <label for="sameDay" class="ml-2" style="font-weight: 700;">Same Day</label>
          <p>Partner:<span class="ml-1">FedeX</span></p>
          <p>Type:<span class="ml-1">Paid</span></p>
          <p>Shipping charge:<span class="ml-1 text-danger">150</span></p>
          <input type="hidden" name="quantity" value="<%=quantity%>" id="allQuantity">
          <input type="hidden" name="totalPrice" value="<%=totalPrice%>" id="totalPrice">
        </div>
      </div>
      <!-- </form> -->
    </div>

    <!---footer-->
    <%-include('partials/footer') %>

      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

      <script>


        // Function to check if a value is empty
        function isEmpty(value) {
          const trimmed = value.trim();
          return trimmed === "";
        }

        // Function to check if the name contains only alphabets
        function isValidName(name) {
          const regex = /^[a-zA-Z]+$/;
          return regex.test(name);
        }

        // Function to validate phone number format (e.g., xxx-xxx-xxxx)
        function isValidPhoneNumber(phoneNumber) {
          const regex = /^\d{10}$/;
          return regex.test(phoneNumber);
        }

        // Function to validate email format
        function isValidEmail(email) {
          const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return regex.test(email);
        }

        // Function to validate pincode format (6 digits)
        function isValidPincode(pinCode) {
          const regex = /^\d{6}$/;
          return regex.test(pinCode);
        }

        // Function to validate street format (alphanumeric characters allowed)
        function isValidStreet(street) {
          const regex = /^[a-zA-Z0-9 ]+$/;
          return regex.test(street);
        }

        // Function to validate city format (only alphabets allowed)
        function isValidCity(city) {
          const regex = /^[a-zA-Z]+$/;
          return regex.test(city);
        }

        // Function to handle form validation
        function validateForm() {
          const fullName = document.getElementById('fullName').value.trim();
          const phoneNumber = document.getElementById('phoneNumber').value.trim();
          const email = document.getElementById('email').value.trim();
          const country = document.getElementById('country').value.trim();
          const pinCode = document.getElementById('pinCode').value.trim();
          const state = document.getElementById('state').value.trim();
          const district = document.getElementById('district').value.trim();
          const city = document.getElementById('city').value.trim();
          const area = document.getElementById('area').value.trim();
          const street = document.getElementById('street').value.trim();
          const building = document.getElementById('building').value.trim();
          const houseNumber = document.getElementById('houseNumber').value.trim();

          // Validate each field and display error messages
          // Validation for fullName
          if (isEmpty(fullName)) {
            document.getElementById('name-error').textContent = 'Please enter a name.';
            document.getElementById('name-error').style.color = 'red';
            return false;
          } else if (!isValidName(fullName)) {
            document.getElementById('name-error').textContent = 'Please enter a valid name (only alphabets allowed).';
            document.getElementById('name-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('name-error').textContent = '';
          }

          // Validation for phoneNumber
          if (isEmpty(phoneNumber)) {
            document.getElementById('phoneNumber-error').textContent = 'Please enter a phone number.';
            document.getElementById('phoneNumber-error').style.color = 'red';
            return false;
          } else if (!isValidPhoneNumber(phoneNumber)) {
            document.getElementById('phoneNumber-error').textContent = 'Please enter a valid phone number.';
            document.getElementById('phoneNumber-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('phoneNumber-error').textContent = '';
          }

          // Validation for email
          if (isEmpty(email)) {
            document.getElementById('email-error').textContent = 'Please enter an email address.';
            document.getElementById('email-error').style.color = 'red';
            return false;
          } else if (!isValidEmail(email)) {
            document.getElementById('email-error').textContent = 'Please enter a valid email address.';
            document.getElementById('email-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('email-error').textContent = '';
          }

          // Validation for country
          if (isEmpty(country)) {
            document.getElementById('country-error').textContent = 'Please enter a country.';
            document.getElementById('country-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('country-error').textContent = '';
          }

          // Validation for pinCode
          if (isEmpty(pinCode)) {
            document.getElementById('pinCode-error').textContent = 'Please enter a pin code.';
            document.getElementById('pinCode-error').style.color = 'red';
            return false;
          } else if (!isValidPincode(pinCode)) {
            document.getElementById('pinCode-error').textContent = 'Please enter a valid pin code (6 digits).';
            document.getElementById('pinCode-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('pinCode-error').textContent = '';
          }

          // Validation for state
          if (isEmpty(state)) {
            document.getElementById('state-error').textContent = 'Please enter a state.';
            document.getElementById('state-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('state-error').textContent = '';
          }

          // Validation for district
          if (isEmpty(district)) {
            document.getElementById('district-error').textContent = 'Please enter a district.';
            document.getElementById('district-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('district-error').textContent = '';
          }

          // Validation for city
          if (isEmpty(city)) {
            document.getElementById('city-error').textContent = 'Please enter a city.';
            document.getElementById('city-error').style.color = 'red';
            return false;
          } else if (!isValidCity(city)) {
            document.getElementById('city-error').textContent = 'Please enter a valid city (only alphabets allowed).';
            document.getElementById('city-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('city-error').textContent = '';
          }

          // Validation for area
          if (isEmpty(area)) {
            document.getElementById('area-error').textContent = 'Please enter an area.';
            document.getElementById('area-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('area-error').textContent = '';
          }

          // Validation for street
          if (isEmpty(street)) {
            document.getElementById('street-error').textContent = 'Please enter a street.';
            document.getElementById('street-error').style.color = 'red';
            return false;
          } else if (!isValidStreet(street)) {
            document.getElementById('street-error').textContent = 'Please enter a valid street (alphanumeric characters allowed).';
            document.getElementById('street-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('street-error').textContent = '';
          }

          // Validation for building
          if (isEmpty(building)) {
            document.getElementById('building-error').textContent = 'Please enter a building name.';
            document.getElementById('building-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('building-error').textContent = '';
          }

          // Validation for houseNumber
          if (isEmpty(houseNumber)) {
            document.getElementById('houseNumber-error').textContent = 'Please enter a house number.';
            document.getElementById('houseNumber-error').style.color = 'red';
            return false;
          } else {
            document.getElementById('houseNumber-error').textContent = '';
          }

          // If all validations pass
          return true;
        }

        // add Address post
        document.getElementById('addAddressModal').addEventListener('submit', async function (event) {
          event.preventDefault();

          const isFormValid = validateForm()
          if (isFormValid) {

            const formData = {
              fullName: document.getElementById('fullName').value,
              phoneNumber: document.getElementById('phoneNumber').value,
              email: document.getElementById('email').value,
              country: document.getElementById('country').value,
              pinCode: parseInt(document.getElementById('pinCode').value),
              state: document.getElementById('state').value,
              district: document.getElementById('district').value,
              city: document.getElementById('city').value,
              area: document.getElementById('area').value,
              street: document.getElementById('street').value,
              building: document.getElementById('building').value,
              houseNumber: document.getElementById('houseNumber').value,
            };

            try {
              const response = await fetch('/account/addAddress', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
              });

              if (!response.ok) {
                throw new Error('Failed to add address');
              }

              const data = await response.json();

              if (data.success) {
                // Show success message using SweetAlert
                Swal.fire({
                  icon: 'success',
                  title: 'Success',
                  text: 'Address edited successfully',
                  showConfirmButton: true,
                  timer: 4000
                }).then(() => {
                  window.location.reload()
                  console.log('Address added to db', data);
                });
              }
            } catch (error) {
              console.error(error);
            }
          }
        });

        // Shipping charges object corresponding to each shipping method
        const shippingCharges = {
          standard: 0,
          express: 100,
          sameDay: 150
        };

        // Function to calculate the total price based on the selected shipping method and cart total
        function calculateTotalPrice(cartTotal, selectedShippingType) {
          const shippingCharge = shippingCharges[selectedShippingType];
          const totalWithShppingCharge = cartTotal + shippingCharge
          return totalWithShppingCharge
        }

        // Function to update displayed total price based on the selected method and cart total
        function updateTotalPrice() {
          const selectedShipping = document.querySelector('input[name="shippingMethod"]:checked');
          const cartTotal = parseFloat('<%=totalPrice%>');


          if (selectedShipping) {
            const selectedShippingType = selectedShipping.value;
            const totalPrice = calculateTotalPrice(cartTotal, selectedShippingType);

            document.getElementById('displayedShippingPrice').textContent = shippingCharges[selectedShippingType];
            document.getElementById('displayedTotalPrice').textContent = totalPrice;
          }
        }

        // Function to calculate subtotal based on quantity and price
        function calculateSubTotal(quantity, price) {
          return quantity * price
        }

        // function to update displayed subtotal based on quantity change
        function updateSubtotal(prductId, newQuantity) {
          const productPrice = parseFloat(document.getElementById())
        }

        // Event listeners for each shipping method input
        const shippingInputs = document.querySelectorAll('input[name="shippingMethod"]');
        shippingInputs.forEach(input => {
          input.addEventListener('change', updateTotalPrice);
        });

        async function placeOrder(event) {
          event.preventDefault();


          const productId = document.getElementById('productId').value;
          const selectedAddress = document.querySelector('input[name="address"]:checked');
          const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
          const standardShipping = document.querySelector('input[name="shippingMethod"][value="standard"]:checked');
          const expressShipping = document.querySelector('input[name="shippingMethod"][value="express"]:checked');
          const sameDayShipping = document.querySelector('input[name="shippingMethod"][value="sameDay"]:checked');

          // Validate if radio inputs are checked
          if (!selectedAddress || !selectedPaymentMethod || (!standardShipping && !expressShipping && !sameDayShipping)) {
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Please select all necessary options!',
              confirmButtonColor: '#3085d6',
              confirmButtonText: 'OK'
            });
            return;
          }

          let selectedShippingType = '';
          if (standardShipping) {
            selectedShippingType = standardShipping.value;
          } else if (expressShipping) {
            selectedShippingType = expressShipping.value;
          } else if (sameDayShipping) {
            selectedShippingType = sameDayShipping.value;
          }

          // Get quantity and total price from the DOM elements
          const quantity = document.getElementById('allQuantity').value;
          const cartTotal = parseFloat('<%=totalPrice%>');

          // Calculate total price including shipping charges
          const shippingCharge = shippingCharges[selectedShippingType];
          const totalPriceWithShipping = cartTotal + shippingCharge;

          // Include shippingMethod, paymentmode, and userId in the order data
          const orderData = {
            productId,
            selectedAddress: selectedAddress.value,
            selectedPaymentMethod: selectedPaymentMethod.value,
            selectedShippingType,
            quantity,
            totalPrice: totalPriceWithShipping,
            shippingMethod: selectedShippingType, // Include shipping method
            paymentmode: selectedPaymentMethod.value, // Include payment mode
          };

          try {
            const response = await fetch('/order/placeOrder', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(orderData)
            });

            const result = await response.json();

            if (result.codSuccess) {
              window.location.href = '/order/orderSuccess';
            }else if(result.lowStock) {
                Swal.fire({
                  icon: 'error',
                  title: 'Insufficient Stock',
                  text: result.message,
                  showConfirmButton: true
                }).then(() => {
                  window.location.href = '/cart/cart';
                });
            }else if (!result.data.online) {
              alert('Online payment not required or unsuccessful');
            } else if (result.data.online) {
              razorPay(result);
            } 
          } catch (err) {
            console.error('fetch error',err);
          }
        }



        //------------------------------------------------------------------------------------------------------------

        function razorpayHandler(payment, order) {
          console.log("Inside handler", payment, order);
          // alert('razorpayHandler called' + payment)

          fetch('/order/verify-payment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              payment,
              order,
            }),
          })
            .then(result => result.json())
            .then(data => {
              if (data.success) {
                console.log('Response received successfully');
                window.location.href = '/order/orderSuccess';
              } else {
                console.log('Response not received');
                window.location.href = '';
              }
            })
            .catch(error => {
              console.error('Fetch error:', error);
            });
        }






        //-----------------------------------------------------------------------------------------------------------------

        function razorPay(order) {
          console.log('razprpay function called',order)
          console.log('ordertotalamount',order.data.order.totalAmount)
          console.log('ordertotalamount',order.data.razorpayOptions.id)
            // alert('razorPay called' + order)
            var options = {
              "key": "rzp_test_RKVZXQThwJG8UG",
              "amount":order.data.order.totalAmount,
              "currency": "INR",
              "name": "M-CART",
              "description": "Test Transaction",
              "image": "https://example.com/your_logo",
              "order_id": order.data.razorpayOptions.id,
              "handler": function (response) {
                console.log("..........payment", response);
                // alert(response.razorpay_payment_id)
                // alert(response.razorpay_order_id)
                // alert(response.razorpay_signature)

                razorpayHandler(response, order);
              },
              "prefill": {
                "name": "M-CART",
              },
              "notes": {
                "address": "Razorpay Corporate Office"
              },
              "theme": {
                "color": "#001524"
              }
            };

          var rzp1 = new Razorpay(options);
          rzp1.open();
        }



        document.getElementById('placeOrderButton').addEventListener('click', placeOrder);
      </script>